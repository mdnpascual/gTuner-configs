#pragma METAINFO("zelda breath of the wild", 1, 2, "mdnpascual")

#include <keyboard.gph>
#include <switch.gph>
#include <mouse.gph>
 
#define MAXGX 45.0
#define DEFAULT_MMY 0.0

// 300.0
#define MAX_ROUND 212.50

#define RIGHTARROW  KEY_RIGHTARROW
#define LEFTARROW  KEY_LEFTARROW

// GIVMXYF:FF000F008000000002000200FE00050A0F14191E23282D32373C41464B50555A5F64
const uint8 mxyc[] = { 0xFF, 0x00, 0x0F, 0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0xFE, 0x00, 0x05, 0x0A, 0x0F, 0x14, 0x19, 0x1E, 0x23, 0x28, 0x2D, 0x32, 0x37, 0x3C, 0x41, 0x46, 0x4B, 0x50, 0x55, 0x5A, 0x5F, 0x64 };
 
bool y_toggle = FALSE;
fix32 mmy;

bool Toggle = FALSE;
bool ToggleKeyPressed=FALSE;

init {
    mxyconverter(mxyc);
    mmy = DEFAULT_MMY;
}

main {
	
	// MOUSE SPEED CHANGE WHEN AIMING
	if(get_val(BUTTON_4) || get_val(BUTTON_5)){
		
		//set_val(STICK_1_X, clamp(get_actual(STICK_1_X), -100.0, 100.0));
		//set_val(STICK_1_Y, clamp(get_actual(STICK_1_Y), -100.0, 100.0));
		
		set_val(SWITCH_ACCZ,0.0 );
		set_val(SWITCH_ACCY,0.0 );
		set_val(SWITCH_GYROZ, 0.0 );
		set_val(SWITCH_GYROY, 0.0 );
		set_val(SWITCH_GYROX, 0.0 );
		set_val(SWITCH_ACCX, 0.0);
		gyro_aim();
		
	}else{
		
		//set_val(STICK_1_Y, clamp(get_actual(STICK_1_Y)*2.0, -100.0, 100.0));
		
	}
	
	// CHANGE ARROW KEY BEHAVIOR WHEN USED AS SELECTOR
	if(get_val(BUTTON_10) || get_val(BUTTON_12) || get_val(BUTTON_13)){
		
		set_val(STICK_2_X, 0);
		if(key_status(RIGHTARROW)){ set_val(STICK_1_X, 100); }
		else if(key_status(LEFTARROW)){ set_val(STICK_1_X, -100); }
		
	}

}
 
void gyro_aim(){
    if(event_active(SWITCH_Y)) {
        y_toggle = !y_toggle;
        mmy = DEFAULT_MMY;
    }
    if(y_toggle) {
        set_val(SWITCH_Y, 100.0);
    }
 
	// fix32 my = get_val(SWITCH_RY) / 1500.0;
	fix32 my = rad2deg(get_val(SWITCH_RY) / 3500.0 * PI) / MAXGX;
    
    mmy = clamp( mmy + my , -MAXGX , MAXGX );
	
	//set_val(SWITCH_ACCY, MAX_ROUND / 6.0 * sin(mmy / MAXGX) );
	set_val(SWITCH_ACCY, mmy );
    
	
    if( abs(mmy) != MAXGX ){
		//set_val(SWITCH_GYROX, MAX_ROUND * sin(my) );
		set_val(SWITCH_GYROX, my * MAX_ROUND );
    }
    else {
        set_val(GYRO_1_X,0.0);
    }
    set_val(SWITCH_ACCZ, abs(get_val(SWITCH_ACCY)) - 25.0  );
	fix32 gyroz = rad2deg(get_val(SWITCH_RX) / 3500.0 * PI) / 45.0 * MAX_ROUND;
	
	//set_val(SWITCH_GYROZ, MAX_ROUND * sin(get_val(STICK_1_X)/1500.0) * -get_val(SWITCH_ACCZ) / 25.0 + gyro_rand()  );
    //set_val(SWITCH_GYROY, MAX_ROUND* sin(get_val(STICK_1_X)/1500.0) * -get_val(SWITCH_ACCY) / 25.0 + gyro_rand() );
	set_val(SWITCH_GYROZ, gyroz * -get_val(SWITCH_ACCZ) / 25.0 );
    set_val(SWITCH_GYROY, gyroz * -get_val(SWITCH_ACCY) / 25.0 );    
	
    set_val(SWITCH_ACCX, 0.0 );
    set_val(SWITCH_RY, 0.0);
    set_val(SWITCH_RX, 0.0);
}
